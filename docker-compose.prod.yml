version: '3.8'

services:
  nginx:
    container_name: nginx
    image: nginx:1.25.1
    build: ./nginx
    ports:
      # 외부 포트: 내부 포트
      # designer_backend port mapping
      - "80:80"
      - "443:443"
      # server port mapping sample
      # - "8080:8080"
    # CORS 문제 해결 관련
    volumes:
      - ./nginx:/etc/nginx.conf.d
      - ./designer_backend/backend_server/.static_root/:/static
      - ./designer_backend/backend_server/.media_root/:/media
    env_file:
      - ./.env.prod  # 운영에서 쓰이는 환경변수
    depends_on:
      - designer_backend
    networks:
      - backend

  redis: # See Also: https://hub.docker.com/_/redis
    container_name: redis
    image: redis:7.0.5-alpine
    hostname: hostname-redis
    env_file:
      - ./.env.prod  # 운영에서 쓰이는 환경변수
    ports:
      - "6379:6379"
    networks:
      - backend

  postgresql:
    container_name: postgres
    image: postgres:15
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - ./.env.prod  # 운영에서 쓰이는 환경변수
    volumes:
      - ./postgresql/data:/var/lib/postgresql/data
    networks:
      - backend


  designer_backend: # designer_backend
    image: softstoneghjung/designer_backend:1.0
    container_name: designer_backend
    build:
        context: .
        dockerfile: ./designer_backend/Dockerfile
    volumes:
      - ./designer_backend/backend_server:/backend_server
    depends_on:
      - redis
      - postgresql
    env_file:
      - ./.env.prod  # 운영에서 쓰이는 환경변수
    # python manage.py runserver 0:8000 역할을 gunicorn 에서 수행
    # gunicorn 장고프로젝트명.wsgi:application --bind 0.0.0.0:8000
    # administration 유저 자동 생성 명령어
    # && python manage.py createsuperuser --noinput
    # wait_for_it.sh 파일을 이용하여 postgresql 컨테이너가 실행될 때까지 기다림
    # wait_for_it.sh 파일은 django 프로젝트 폴더에 위치해야 함(WORKDIR)
    command: >
      bash -c "
      chmod +x ./wait_for_it.sh
      && ./wait_for_it.sh postgresql:5432 --timeout=120
      && python manage.py collectstatic --noinput
      && python manage.py makemigrations
      && python manage.py makemigrations designer_server web reservation customer
      && python manage.py migrate
      && gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    networks:
      - backend

networks:
  backend:
    driver: bridge
